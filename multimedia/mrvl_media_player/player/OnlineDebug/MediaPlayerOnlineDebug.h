/*
 **                Copyright 2012, MARVELL SEMICONDUCTOR, LTD.
 ** THIS CODE CONTAINS CONFIDENTIAL INFORMATION OF MARVELL.
 ** NO RIGHTS ARE GRANTED HEREIN UNDER ANY PATENT, MASK WORK RIGHT OR COPYRIGHT
 ** OF MARVELL OR ANY THIRD PARTY. MARVELL RESERVES THE RIGHT AT ITS SOLE
 ** DISCRETION TO REQUEST THAT THIS CODE BE IMMEDIATELY RETURNED TO MARVELL.
 ** THIS CODE IS PROVIDED "AS IS". MARVELL MAKES NO WARRANTIES, EXPRESSED,
 ** IMPLIED OR OTHERWISE, REGARDING ITS ACCURACY, COMPLETENESS OR PERFORMANCE.
 **
 ** MARVELL COMPRISES MARVELL TECHNOLOGY GROUP LTD. (MTGL) AND ITS SUBSIDIARIES,
 ** MARVELL INTERNATIONAL LTD. (MIL), MARVELL TECHNOLOGY, INC. (MTI), MARVELL
 ** SEMICONDUCTOR, INC. (MSI), MARVELL ASIA PTE LTD. (MAPL), MARVELL JAPAN K.K.
 ** (MJKK), MARVELL ISRAEL LTD. (MSIL).
 */
#ifndef MEDIAPLAYER_ONLINE_DEBUG_H
#define MEDIAPLAYER_ONLINE_DEBUG_H

#include "IOnlineDebug.h"

namespace mmp {

#define TIME_SECOND 1000000LL
#define TIME_FORMAT "%u:%02u:%02u.%06u"
#define TIME_ARGS(t)    \
    (uint32_t)((t) / (TIME_SECOND * 60 * 60)), \
    (uint32_t)(((t) / (TIME_SECOND * 60)) % 60), \
    (uint32_t)(((t) / TIME_SECOND) % 60), \
    (uint32_t)((t) % TIME_SECOND)

#define STRINGIFY(x) case x: return #x


#define ONLINE_DEBUG_PRINT(str, ...) \
    (ALOGD("%s() line %d: " str, __FUNCTION__, __LINE__, ##__VA_ARGS__))
#define ONLINE_DEBUG_PRINT_ERROR(str, ...) \
    (ALOGE("%s() line %d: " str, __FUNCTION__, __LINE__, ##__VA_ARGS__))

#define CORE_PLAYER_TRACE(str, ...)         ((void)LOG(LOG_DEBUG, "CorePlayer", str, ##__VA_ARGS__))

#define MASK_COREPLAYER      0b00000000000000000000000000000000000000000000000000000000011111111LL
#define MASK_CP_API          0b00000000000000000000000000000000000000000000000000000000000000001LL
#define MASK_CP_RUNTIME      0b00000000000000000000000000000000000000000000000000000000000000010LL
#define MASK_CP_ES_DATA      0b00000000000000000000000000000000000000000000000000000000000000100LL
#define MASK_CP_DUMP_AUDIO   0b00000000000000000000000000000000000000000000000000000000000100000LL
#define MASK_CP_DUMP_VIDEO   0b00000000000000000000000000000000000000000000000000000000001000000LL
#define MASK_CP_DEBUG_LOOP   0b00000000000000000000000000000000000000000000000000000000100000000LL

#define CORE_DEFAULT_MASK ((MASK_CP_API) | (MASK_CP_RUNTIME))

#define MASK_VIDEO_ENGINE    0b00000000000000000000000000000000000000000000000001111111100000000LL
#define MASK_VE_API          0b00000000000000000000000000000000000000000000000000000000100000000LL
#define MASK_VE_RUNTIME      0b00000000000000000000000000000000000000000000000000000001000000000LL

#define VE_DEFAULT_MASK ((MASK_VE_API) | (MASK_VE_RUNTIME))

#define MASK_AUDIO_ENGINE    0b00000000000000000000000000000000000000000111111110000000000000000LL
#define MASK_AE_API          0b00000000000000000000000000000000000000000000000010000000000000000LL
#define MASK_AE_RUNTIME      0b00000000000000000000000000000000000000000000000100000000000000000LL

#define AE_DEFAULT_MASK ((MASK_AE_API) | (MASK_AE_RUNTIME))

#define MASK_SUB_ENGINE      0b00000000000000000000000000000000011111111000000000000000000000000LL
#define MASK_SE_API          0b00000000000000000000000000000000000000001000000000000000000000000LL
#define MASK_SE_RUNTIME      0b00000000000000000000000000000000000000010000000000000000000000000LL

#define SE_DEFAULT_MASK ((MASK_SE_API) | (MASK_SE_RUNTIME))

#define MASK_DATA_READER     0b00000000000000000000000001111111100000000000000000000000000000000LL
#define MASK_DR_API          0b00000000000000000000000000000000100000000000000000000000000000000LL
#define MASK_DR_RUNTIME      0b00000000000000000000000000000001000000000000000000000000000000000LL
#define MASK_DR_VIDEO        0b00000000000000000000000000000010000000000000000000000000000000000LL
#define MASK_DR_AUDIO        0b00000000000000000000000000000100000000000000000000000000000000000LL
#define MASK_DR_SUB          0b00000000000000000000000000001000000000000000000000000000000000000LL

#define MASK_DATA_SOURCE     0b00000000000000000000001110000000000000000000000000000000000000000LL
#define MASK_DS_DUMP_HLS     0b00000000000000000000000010000000000000000000000000000000010000000LL

#define DR_DEFAULT_MASK ((MASK_DR_API) | (MASK_DR_RUNTIME))

#define DEFAULT_MASK ((CORE_DEFAULT_MASK) | \
    (VE_DEFAULT_MASK) | \
    (AE_DEFAULT_MASK) | \
    (SE_DEFAULT_MASK) | \
    (DR_DEFAULT_MASK))

#define CORE_PLAYER_API(fmt, ...) \
  do { \
    if (OnlineDebugBitMask & MASK_CP_API) { \
      ALOGD("%s(): %s() line %d: "fmt, log_tag_, __FUNCTION__, __LINE__, ##__VA_ARGS__); \
    } \
  } while(0);

#define CORE_PLAYER_ERROR(fmt, ...) \
  do { \
    if (1) { \
      ALOGE("%s(): %s() line %d: "fmt, log_tag_, __FUNCTION__, __LINE__, ##__VA_ARGS__); \
    } \
  } while(0);


#define CORE_PLAYER_RUNTIME(fmt, ...) \
  do { \
    if (OnlineDebugBitMask & MASK_CP_RUNTIME) { \
      ALOGD("%s(): %s() line %d: "fmt, log_tag_, __FUNCTION__, __LINE__, ##__VA_ARGS__); \
    } \
  } while(0);

#define CORE_PLAYER_ES_DATA(fmt, ...) \
  do { \
    if (OnlineDebugBitMask & MASK_CP_ES_DATA) { \
      ALOGD("%s(): %s() line %d: "fmt, log_tag_, __FUNCTION__, __LINE__, ##__VA_ARGS__); \
    } \
  } while(0);

#define CORE_PLAYER_DEBUG_LOOP(...) \
  do { \
    if (1) { \
      CORE_PLAYER_TRACE(__VA_ARGS__); \
    } \
  } while(0);


#define DATA_READER_ERROR(...) \
  do { \
    if (1) { \
      ONLINE_DEBUG_PRINT_ERROR(__VA_ARGS__); \
    } \
  } while(0);

#define DATA_READER_API_TRACE(...) \
  do { \
    if (OnlineDebugBitMask & MASK_DR_API) { \
      ONLINE_DEBUG_PRINT(__VA_ARGS__); \
    } \
  } while(0);

#define DATA_READER_RUNTIME(...) \
  do { \
    if (OnlineDebugBitMask & MASK_DR_RUNTIME) { \
      ONLINE_DEBUG_PRINT(__VA_ARGS__); \
    } \
  } while(0);

#define DATA_READER_VIDEO_FRAME(...) \
  do { \
    if (OnlineDebugBitMask & MASK_DR_VIDEO) { \
      ONLINE_DEBUG_PRINT(__VA_ARGS__); \
    } \
  } while(0);

#define DATA_READER_AUDIO_FRAME(str, ...) \
  do { \
    if (OnlineDebugBitMask & MASK_DR_AUDIO) { \
      ONLINE_DEBUG_PRINT(str, ##__VA_ARGS__); \
    } \
  } while(0);

#define DATA_READER_SUB_FRAME(str, ...) \
  do { \
    if (OnlineDebugBitMask & MASK_DR_SUB) { \
      ONLINE_DEBUG_PRINT(str, ##__VA_ARGS__); \
    } \
  } while(0);


#define COREPLAYER_DUMP_AUDIO_ES   (OnlineDebugBitMask & MASK_CP_DUMP_AUDIO)
#define COREPLAYER_DUMP_VIDEO_ES   (OnlineDebugBitMask & MASK_CP_DUMP_VIDEO)
#define COREPLAYER_DEBUG_LOOP      (OnlineDebugBitMask & MASK_CP_DEBUG_LOOP)
#define DATASOURCE_HLS_DUMP_DATA   (OnlineDebugBitMask & MASK_DS_DUMP_HLS)


#define MV_LOGV(fmt, ...) \
    ALOGV("%s: %s() line %d: " fmt, log_tag_, __FUNCTION__, __LINE__, ##__VA_ARGS__)
#define MV_LOGD(fmt, ...) \
    ALOGD("%s: %s() line %d: " fmt, log_tag_, __FUNCTION__, __LINE__, ##__VA_ARGS__)
#define MV_LOGI(fmt, ...) \
    ALOGI("%s: %s() line %d: " fmt, log_tag_, __FUNCTION__, __LINE__, ##__VA_ARGS__)
#define MV_LOGW(fmt, ...) \
    ALOGW("%s: %s() line %d: " fmt, log_tag_, __FUNCTION__, __LINE__, ##__VA_ARGS__)
#define MV_LOGE(fmt, ...) \
    ALOGE("%s: %s() line %d: " fmt, log_tag_, __FUNCTION__, __LINE__, ##__VA_ARGS__)


#define MRVL_PLAYER_LOGV(fmt, ...) \
    ALOGV("%s() line %d: " fmt, __FUNCTION__, __LINE__, ##__VA_ARGS__)
#define MRVL_PLAYER_LOGD(fmt, ...) \
    ALOGD("%s() line %d: " fmt, __FUNCTION__, __LINE__, ##__VA_ARGS__)
#define MRVL_PLAYER_LOGI(fmt, ...) \
    ALOGI("%s() line %d: " fmt, __FUNCTION__, __LINE__, ##__VA_ARGS__)
#define MRVL_PLAYER_LOGW(fmt, ...) \
    ALOGW("%s() line %d: " fmt, __FUNCTION__, __LINE__, ##__VA_ARGS__)
#define MRVL_PLAYER_LOGE(fmt, ...) \
    ALOGE("%s() line %d: " fmt, __FUNCTION__, __LINE__, ##__VA_ARGS__)


class MediaPlayerOnlineDebug : public BnOnlineDebug {
  public:
   explicit MediaPlayerOnlineDebug();
   ~MediaPlayerOnlineDebug() {}
   virtual void SetBitMask(uint64_t bit_mask);

   virtual uint64_t GetBitMask();
};

}

#endif
